{
    "Description": "Image gateway",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Storage"
                    },
                    "Parameters": [
                        "BucketName"
                    ]
                },
                {
                    "Label": {
                        "default": "Lambda source"
                    },
                    "Parameters": [
                        "LambdaSourceBucket",
                        "LambdaFileName"
                    ]
                }
            ],
            "ParameterLabels": {
                "BucketName": {
                    "default": "S3 Storage Bucket"
                },
                "LambdaFileName": {
                    "default": "Path and name of the file inside S3 Bucket"
                },
                "LambdaSourceBucket": {
                    "default": "S3 Bucket with Lambda source"
                }
            }
        }
    },
    "Outputs": {
        "CloudFrontUrl": {
            "Value": {
                "Fn::GetAtt": [
                    "CloudFrontDistribution",
                    "DomainName"
                ]
            }
        }
    },
    "Parameters": {
        "BucketName": {
            "Description": "Name of the STORAGE bucket to create where the images will be uploaded and renditions cached",
            "Type": "String"
        },
        "LambdaFileName": {
            "Description": "Name of the ZIP file with lambda function sources inside LambdaSourceBucket",
            "Type": "String"
        },
        "LambdaSourceBucket": {
            "Description": "Name of the bucket where lambda function sources is stored",
            "Type": "String"
        }
    },
    "Resources": {
        "API": {
            "Properties": {
                "Description": "Image Gateway API",
                "Name": "ImageGateway"
            },
            "Type": "AWS::ApiGateway::RestApi"
        },
        "APIDeployment": {
            "Properties": {
                "RestApiId": {
                    "Ref": "API"
                },
                "StageDescription": {
                    "CacheClusterEnabled": false
                },
                "StageName": "live"
            },
            "Type": "AWS::ApiGateway::Deployment"
        },
        "APIImageMethodGET": {
            "Properties": {
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "HttpMethod": "GET",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "IntegrationResponses": [
                        {
                            "ResponseParameters": {
                                "method.response.header.Location": "integration.response.body.location"
                            },
                            "ResponseTemplates": {
                                "application/json": "$input.params('whatever')"
                            },
                            "StatusCode": "302"
                        },
                        {
                            "ResponseTemplates": {
                                "application/json": "$input.params('whatever')"
                            },
                            "SelectionPattern": "[a-zA-Z]+.*",
                            "StatusCode": "404"
                        }
                    ],
                    "RequestTemplates": {
                        "application/json": {
                            "Fn::Join": [
                                "",
                                [
                                    "{\"width\": \"$input.params('width')\", \"image\": \"$input.params('image')\", \"height\": \"$input.params('height')\", \"bucket\":\"",
                                    {
                                        "Ref": "BucketName"
                                    },
                                    "\", \"cloudfront\":\"",
                                    {
                                        "Fn::GetAtt": [
                                            "CloudFrontDistribution",
                                            "DomainName"
                                        ]
                                    },
                                    "\"}"
                                ]
                            ]
                        }
                    },
                    "Type": "AWS",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "Lambda",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": [
                    {
                        "ResponseParameters": {
                            "method.response.header.Location": true
                        },
                        "StatusCode": "302"
                    },
                    {
                        "StatusCode": "404"
                    }
                ],
                "RequestParameters": {
                    "method.request.path.image": true,
                    "method.request.querystring.height": true,
                    "method.request.querystring.width": true
                },
                "ResourceId": {
                    "Ref": "APIImageResource"
                },
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Type": "AWS::ApiGateway::Method"
        },
        "APIImageResource": {
            "Properties": {
                "ParentId": {
                    "Fn::GetAtt": [
                        "API",
                        "RootResourceId"
                    ]
                },
                "PathPart": "{image}",
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Type": "AWS::ApiGateway::Resource"
        },
        "APILambdaPermission": {
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Ref": "Lambda"
                },
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:aws:execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "API"
                            },
                            "/*/GET/*"
                        ]
                    ]
                }
            },
            "Type": "AWS::Lambda::Permission"
        },
        "CloudFrontDistribution": {
            "Properties": {
                "DistributionConfig": {
                    "CacheBehaviors": [
                        {
                            "DefaultTTL": 86400,
                            "ForwardedValues": {
                                "QueryString": "false"
                            },
                            "PathPattern": "images/*",
                            "TargetOriginId": "bucket",
                            "ViewerProtocolPolicy": "allow-all"
                        }
                    ],
                    "Comment": "Image Gateway",
                    "CustomErrorResponses": [
                        {
                            "ErrorCachingMinTTL": 0,
                            "ErrorCode": 403
                        },
                        {
                            "ErrorCachingMinTTL": 0,
                            "ErrorCode": 404
                        }
                    ],
                    "DefaultCacheBehavior": {
                        "ForwardedValues": {
                            "Headers": [
                                "Location"
                            ],
                            "QueryString": "true"
                        },
                        "TargetOriginId": "lambda",
                        "ViewerProtocolPolicy": "allow-all"
                    },
                    "Enabled": "true",
                    "Origins": [
                        {
                            "CustomOriginConfig": {
                                "OriginProtocolPolicy": "https-only"
                            },
                            "DomainName": {
                                "Fn::Join": [
                                    "",
                                    [
                                        {
                                            "Ref": "API"
                                        },
                                        ".execute-api.",
                                        {
                                            "Ref": "AWS::Region"
                                        },
                                        ".amazonaws.com"
                                    ]
                                ]
                            },
                            "Id": "lambda",
                            "OriginPath": "/live"
                        },
                        {
                            "CustomOriginConfig": {
                                "OriginProtocolPolicy": "http-only"
                            },
                            "DomainName": {
                                "Fn::Join": [
                                    "",
                                    [
                                        {
                                            "Ref": "StorageBucket"
                                        },
                                        ".s3-website-",
                                        {
                                            "Ref": "AWS::Region"
                                        },
                                        ".amazonaws.com"
                                    ]
                                ]
                            },
                            "Id": "bucket"
                        }
                    ],
                    "PriceClass": "PriceClass_100"
                }
            },
            "Type": "AWS::CloudFront::Distribution"
        },
        "LambaRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            }
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        "arn:aws:logs:*:*:*"
                                    ]
                                },
                                {
                                    "Action": [
                                        "s3:GetObject"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:s3:::",
                                                    {
                                                        "Ref": "StorageBucket"
                                                    },
                                                    "/*"
                                                ]
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Action": [
                                        "s3:PutObject*"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:s3:::",
                                                    {
                                                        "Ref": "StorageBucket"
                                                    },
                                                    "/images/*"
                                                ]
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        "PolicyName": "ImgGatewayLambaPolicy"
                    }
                ]
            },
            "Type": "AWS::IAM::Role"
        },
        "Lambda": {
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "LambdaSourceBucket"
                    },
                    "S3Key": {
                        "Ref": "LambdaFileName"
                    }
                },
                "Handler": "lambda.lambda_handler",
                "MemorySize": 128,
                "Role": {
                    "Fn::GetAtt": [
                        "LambaRole",
                        "Arn"
                    ]
                },
                "Runtime": "python2.7",
                "Timeout": 30
            },
            "Type": "AWS::Lambda::Function"
        },
        "StorageBucket": {
            "Properties": {
                "AccessControl": "Private",
                "BucketName": {
                    "Ref": "BucketName"
                },
                "LifecycleConfiguration": {
                    "Rules": [
                        {
                            "ExpirationInDays": 14,
                            "Prefix": "images/",
                            "Status": "Enabled"
                        }
                    ]
                },
                "WebsiteConfiguration": {
                    "IndexDocument": "index.html"
                }
            },
            "Type": "AWS::S3::Bucket"
        }
    }
}
